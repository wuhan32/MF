{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\app\\dhjsMF\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\app\\dhjsMF\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Desktop\\app\\dhjsMF\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\app\\dhjsMF\\src\\views\\home\\home.vue?vue&type=template&id=39f87be5&scoped=true&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\app\\dhjsMF\\src\\views\\home\\home.vue","mtime":1577763336956},{"path":"C:\\Users\\Administrator\\Desktop\\app\\dhjsMF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1577675743891},{"path":"C:\\Users\\Administrator\\Desktop\\app\\dhjsMF\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1577675848244},{"path":"C:\\Users\\Administrator\\Desktop\\app\\dhjsMF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1577675743891},{"path":"C:\\Users\\Administrator\\Desktop\\app\\dhjsMF\\node_modules\\vue-loader\\lib\\index.js","mtime":1577675848244}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAiSG9tZSIgfSB9LCBbCiAgICBfYygiaGVhZGVyIiwgeyBzdGF0aWNDbGFzczogInciIH0sIFsKICAgICAgX3ZtLl9tKDApLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRvd25sb2FkIiB9LCBbCiAgICAgICAgX3ZtLl9tKDEpLAogICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgIF92bS5fbSgyKSwKICAgICAgICAgIF92bS5fbSgzKSwKICAgICAgICAgIF92bS5fbSg0KSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAibGkiLAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZWwtdG9vbHRpcCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaXRlbSIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiAibGlnaHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICIwNzU2LTM2Njg4ODggIiwKICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6ICJ0b3Atc3RhcnQiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiaWNvbmZvbnQgaWNvbi16aXl1YW4iIH0pXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAibGkiLAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZWwtdG9vbHRpcCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaXRlbSIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiAibGlnaHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICJkaGpjQGRhaGVuZ3poLmNvbSAiLAogICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudDogInRvcC1zdGFydCIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImkiLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpY29uZm9udCBpY29uLWx1bmt1b2Rhc2FuLSIsCiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgY29sb3I6ICJ2YXIoLS15KSIgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKSwKICAgIF92bS5fbSg1KSwKICAgIF92bS5fbSg2KSwKICAgIF9jKCJib2R5IiwgeyBzdGF0aWNDbGFzczogInciIH0sIFsKICAgICAgX2MoImRpdiIsIFsKICAgICAgICBfdm0uX20oNyksCiAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWFpbiIsIHN0YXRpY1N0eWxlOiB7IGhlaWdodDogIjE4MHB4IiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl9tKDgpLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRqLWZvb3RlciIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInVsIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJkai1mb290ZXItYm9keSIgfSwKICAgICAgICAgICAgICAgIF92bS5fbCgxMCwgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKCJsaSIsIHsga2V5OiBpbmRleCB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy92aWRlb2ltZy5wbmciKSwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLnpZ3otLrkuJbnuqrllYrlrp7miZPlrp7lpKfluIjpmL/ovr4xMjMxMjMxMjMxMjMxMjMxMjMxMjMxMjMiKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvdmlkZW9pbWcucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogInN3aXBlcnQiIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJlbC1jYXJvdXNlbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgImluZGljYXRvci1wb3NpdGlvbiI6ICJvdXRzaWRlIiwgYXV0b3BsYXk6ICIiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJlbC1jYXJvdXNlbC1pdGVtIiwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvc3dpcGVyLmpwZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZWwtY2Fyb3VzZWwtaXRlbSIsIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL3N3aXBlcnQwMiAoMSkuanBnIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJlbC1jYXJvdXNlbC1pdGVtIiwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvc3dpcGVydDAyICgyKS5qcGciKSwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJvZHktcmlnaHQiIH0sIFsKICAgICAgICBfdm0uX20oOSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYWluIiwgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiMzMwcHgiIH0gfSwgWwogICAgICAgICAgX3ZtLl9tKDEwKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZHQtZm9vdGVyIiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJ1bCIsCiAgICAgICAgICAgICAgX3ZtLl9sKDEwLCBmdW5jdGlvbihpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF9jKCJsaSIsIHsga2V5OiBpbmRleCB9LCBbX3ZtLl9tKDExLCB0cnVlKV0pCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgMAogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJvZHktcmlnaHQgYm9keS1yaWdodC10IiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYWluIiwgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiMzYwcHgiIH0gfSwgWwogICAgICAgICAgX3ZtLl9tKDEyKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZHQtZm9vdGVyIiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJ1bCIsCiAgICAgICAgICAgICAgX3ZtLl9sKDgsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX2MoImxpIiwgeyBrZXk6IGluZGV4LCBzdGF0aWNDbGFzczogImZsLWdvb3RlciIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX20oMTMsIHRydWUpLAogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmbC1nb290ZXItdGltZSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiMjAxOS0xMi0zMCIpCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIDAKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJib2R5LXJpZ2h0IGJvZHktcmlnaHQtbSIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWFpbiIsIHN0YXRpY1N0eWxlOiB7IGhlaWdodDogIjM2MHB4IiB9IH0sIFsKICAgICAgICAgIF92bS5fbSgxNCksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImR0LWZvb3RlciIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAidWwiLAogICAgICAgICAgICAgIF92bS5fbCgxNSwgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfYygibGkiLCB7IGtleTogaW5kZXgsIHN0YXRpY0NsYXNzOiAiZmwtZ29vdGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fbSgxNSwgdHJ1ZSksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImZsLWdvb3Rlci10aW1lIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIyMDE5LTEyLTMwIikKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgMAogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJvZHktcmlnaHQtdCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1haW4iLCBzdGF0aWNTdHlsZTogeyBoZWlnaHQ6ICIzNjBweCIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fbSgxNiksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZGotZm9vdGVyIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAidWwiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRqLWZvb3Rlci1ib2R5IiwKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiMjYwcHgiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfdm0uX2woMTAsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfYygibGkiLCB7IGtleTogaW5kZXggfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvdmlkZW9pbWcucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigi56Wd6LS65LiW57qq5ZWK5a6e5omT5a6e5aSn5biI6Zi/6L6+MTIzMTIzMTIzMTIzMTIzMTIzMTIzMTIzIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL3ZpZGVvaW1nLnBuZyIpLAogICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pLAogICAgX2MoImZvb3RlciIsIHsgc3RhdGljQ2xhc3M6ICJ3IiB9LCBbCiAgICAgIF92bS5fbSgxNyksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9vdGVyLWwiIH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImZvb3Rlci1sLXIiIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fbSgxOCksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJiYWlkdS1tYXAiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9vdGVyLWwtbSIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBjZW50ZXI6IF92bS5jZW50ZXIsIHpvb206IF92bS56b29tIH0sCiAgICAgICAgICAgICAgICBvbjogeyByZWFkeTogX3ZtLmhhbmRsZXIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJibS1tYXJrZXIiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7IGxuZzogMTEzLjU3MTg5OCwgbGF0OiAyMi4yODM1MzUgfSwKICAgICAgICAgICAgICAgICAgICAgIGRyYWdnaW5nOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiAiQk1BUF9BTklNQVRJT05fQk9VTkNFIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJibS1sYWJlbCIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICLlpKfmgZLlu7rorr7pm4blm6IiLAogICAgICAgICAgICAgICAgICAgICAgICBsYWJlbFN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICJ2YXIoLS1nKSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICIxMnB4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6ICJub25lIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHsgd2lkdGg6IC0zNSwgaGVpZ2h0OiAzMCB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb290ZXItbC1saiIgfSwgWwogICAgICAgICAgX3ZtLl9tKDE5KSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9vdGVyLWwtbGotYm9keSIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAidWwiLAogICAgICAgICAgICAgIF92bS5fbCgyMCwgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfYygibGkiLCB7IGtleTogaW5kZXggfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgeyBhdHRyczogeyBzcmM6ICIiLCBhbHQ6ICIiIH0gfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigi5bm/5Lic55yB5bu6562R5Y2P5LyaIildKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAwCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb290ZXItRiIgfSksCiAgICBfdm0uX20oMjApCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsb2dvIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL2xvZ28ucG5nIiksIGFsdDogIiIgfQogICAgICB9KSwKICAgICAgX2MoImgxIiwgW192bS5fdigi5aSn5oGS5bu66K6+6ZuG5Zui5pyJ6ZmQ5YWs5Y+4IildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIFsKICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICJodHRwOi8vd3d3LmRhaGVuZ3poLmNvbS8uY29tIiB9IH0sIFsKICAgICAgICBfdm0uX3YoInd3dy5kYWhlbmd6aC5jb20iKQogICAgICBdKSwKICAgICAgX2MoImltZyIsIHsKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvYXBwLnBuZyIpLCBhbHQ6ICIiIH0KICAgICAgfSksCiAgICAgIF9jKCJwIiwgW192bS5fdigiYXBw5LiL6L29IildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImxpIiwgWwogICAgICBfYygiaSIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImljb25mb250IGljb24td2VpeGluZmFuZyIsCiAgICAgICAgc3RhdGljU3R5bGU6IHsgY29sb3I6ICIjMDE5OTM0IiB9CiAgICAgIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygibGkiLCBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiaWNvbmZvbnQgaWNvbi1zaG91amkiIH0pXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImxpIiwgWwogICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJpY29uZm9udCBpY29uLXpob25neWluZ3dlbnFpZWh1YW4iIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZmlnY2FwdGlvbiIsIFsKICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogInciIH0sIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCLpppbpobUiKV0pLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIuaWsOmXu+S4reW/gyIpXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigi6LWw6L+b5aSn5oGSIildKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCLnu4/okKXpoobln58iKV0pLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIuS8geS4muaWh+WMliIpXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigi5Lq65Yqb6LWE5rqQIildKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCLnpL7kvJrotKPku7siKV0pLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIuS4i+i9veS4k+WMuiIpXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigi6IGU57O75oiR5LusIildKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImZpZ3VyZSIsIHsgc3RhdGljQ2xhc3M6ICJ3IiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nLzExMS5qcGciKSwgYWx0OiAiIiB9CiAgICAgIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsgc3RhdGljQ2xhc3M6ICJtYWluIiwgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiMTgwcHgiIH0gfSwKICAgICAgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWFpbi1oZWFkZXIiIH0sIFsKICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIuS/oeaBr+WMluWkp+aBkiIpXSksCiAgICAgICAgICBfYygic3BhbiIsIFsKICAgICAgICAgICAgX3ZtLl92KCIg5pu05aSa5L+h5oGvICIpLAogICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJpY29uZm9udCBpY29uLWljb25mb250YXJyb3dkb3duIiB9KQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInh4LWZvb3RlciIgfSwgWwogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy94Zi5wbmciKSwgYWx0OiAiIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCLooYzmlL9PQSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL3hmLnBuZyIpLCBhbHQ6ICIiIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIui9pui+hueUs+ivtyIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL3hmLnBuZyIpLCBhbHQ6ICIiIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIuWQiOWQjOeuoeeQhiIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJtb3JlIiB9LCBbX2MoInNwYW4iLCBbX3ZtLl92KCJNT1JFICsiKV0pXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1haW4taGVhZGVyIiB9LCBbCiAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIuWkp+aBkuWFmuW7uiIpXSksCiAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgIF92bS5fdigiIOabtOWkmuS/oeaBryAiKSwKICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJpY29uZm9udCBpY29uLWljb25mb250YXJyb3dkb3duIiB9KQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJib2R5LXJpZ2h0LWhlYWRlciIgfSwgWwogICAgICBfYygiaDQiLCBbX3ZtLl92KCLmlrDpl7vlhbPms6giKV0pLAogICAgICBfYygic3BhbiIsIFtfdm0uX3YoIjEyMzEyMzEyMzEyMzEyMyIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWFpbi1oZWFkZXIiIH0sIFsKICAgICAgX2MoImg0IiwgW192bS5fdigi5L+h5oGv5YyW5aSn5oGSIildKSwKICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgX3ZtLl92KCIg5pu05aSa5L+h5oGvICIpLAogICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImljb25mb250IGljb24taWNvbmZvbnRhcnJvd2Rvd24iIH0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygicCIsIFsKICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiaWNvbmZvbnQgaWNvbi1maWxlIiB9KSwKICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIuiwgeemu+W8gOWQjuemu+WpmuaIkeaYgummlueIseWVpemDveWlpeWbm+Wto+ixhuadpeivtOemu+WpmuWwseWHoOeCueWVpuWbm+Wto+ixhuWVpuaLieiQqOeahOWeg+WcvuaQnCIKICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1haW4taGVhZGVyIiB9LCBbCiAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJtYWluLWhlYWRlci1wIiB9LCBbCiAgICAgICAgX2MoInAiLCBbX3ZtLl92KCLms5Xlvovms5Xop4QiKV0pLAogICAgICAgIF9jKCJwIiwgW192bS5fdigi56eR5oqA5oiQ5p6cIildKSwKICAgICAgICBfYygicCIsIFtfdm0uX3YoIue7v+iJsuW7uuetkSIpXSkKICAgICAgXSksCiAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgIF92bS5fdigiIOabtOWkmuS/oeaBryAiKSwKICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJpY29uZm9udCBpY29uLWljb25mb250YXJyb3dkb3duIiB9KQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInAiLCBbCiAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImljb25mb250IGljb24tZmlsZSIgfSksCiAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICLosIHnprvlvIDlkI7nprvlqZrmiJHmmILpppbniLHllaXpg73lpaXlm5vlraPosYbmnaXor7TnprvlqZrlsLHlh6Dngrnllablm5vlraPosYbllabmi4nokKjnmoTlnoPlnL7mkJwiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYWluLWhlYWRlciIgfSwgWwogICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAibWFpbi1oZWFkZXItZyIgfSwgWwogICAgICAgIF9jKCJwIiwgW192bS5fdigi5bel5Lya5aeU5ZGYIildKSwKICAgICAgICBfYygicCIsIFtfdm0uX3YoIuihjOS4muaWsOmXuyIpXSkKICAgICAgXSksCiAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgIF92bS5fdigiIOabtOWkmuS/oeaBryAiKSwKICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJpY29uZm9udCBpY29uLWljb25mb250YXJyb3dkb3duIiB9KQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInAiLCBbCiAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImljb25mb250IGljb24tZmlsZSIgfSksCiAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICLosIHnprvlvIDlkI7nprvlqZrmiJHmmILpppbniLHllaXpg73lpaXlm5vlraPosYbmnaXor7TnprvlqZrlsLHlh6Dngrnllablm5vlraPosYbllabmi4nokKjnmoTlnoPlnL7mkJwiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYWluLWhlYWRlciIgfSwgWwogICAgICBfYygiaDQiLCBbX3ZtLl92KCLkvIHkuJrop4bpopEiKV0pLAogICAgICBfYygic3BhbiIsIFsKICAgICAgICBfdm0uX3YoIiDmm7TlpJrkv6Hmga8gIiksCiAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiaWNvbmZvbnQgaWNvbi1pY29uZm9udGFycm93ZG93biIgfSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9vdGVyLXIiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYWluLWhlYWRlciIgfSwgWwogICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIuW3peeoi+WxleekuiIpXSksCiAgICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgICBfdm0uX3YoIiDmm7TlpJrkv6Hmga8gIiksCiAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJpY29uZm9udCBpY29uLWljb25mb250YXJyb3dkb3duIiB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvb3Rlci1yLWJvZHkiIH0sIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL2djMDEucG5nIiksIGFsdDogIiIgfQogICAgICAgIH0pLAogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvZ2MwMi5qcGciKSwgYWx0OiAiIiB9CiAgICAgICAgfSksCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9nYzAzLmpwZyIpLCBhbHQ6ICIiIH0KICAgICAgICB9KQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYWluLWhlYWRlciIgfSwgWwogICAgICBfYygiaDQiLCBbX3ZtLl92KCLlpKfmgZLmgLvpg6giKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1haW4taGVhZGVyIiB9LCBbCiAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIuWPi+aDhemTvuaOpSIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9vdGVyLWZmIHciIH0sIFsKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIueJiOadg+aJgOacie+8muWkp+aBkuW7uuiuvumbhuWbouaciemZkOWFrOWPuCDlpIfmoYjlj7fvvJrosatJQ1DlpIcxMDAxMDcxMOWPty0xIOWcsOWdgO+8muePoOa1t+W4gummmea0suWMuumTtuahpui3rzjlj7cxNTA1IgogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}